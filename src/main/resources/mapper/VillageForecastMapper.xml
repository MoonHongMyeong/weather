<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.portfolio.weather.scheduler.mapper.VillageForecastMapper">
    <select id="getLatestVersionByFileType" resultType="map">
        SELECT 
            version,
            file_type as fileType,
        FROM village_forecast_version
        WHERE file_type = #{fileType}
        ORDER BY version DESC
        LIMIT 1
    </select>

    <insert id="mergeLatestVersion" parameterType="map">
        /* H2 Database */
        <if test="_databaseId == 'h2'">
            MERGE INTO village_forecast_version AS target
            USING (VALUES (
                #{version},
                #{fileType},
                CURRENT_TIMESTAMP
            )) AS source (
                version, file_type, created_at
            )
            ON target.file_type = source.file_type
            WHEN MATCHED THEN
                UPDATE SET 
                    version = source.version,
                    created_at = source.created_at
            WHEN NOT MATCHED THEN
                INSERT (version, file_type, created_at)
                VALUES (source.version, source.file_type, source.created_at)
        </if>
    
        /* PostgreSQL */
        <if test="_databaseId == 'postgresql'">
            INSERT INTO village_forecast_version (
                version, 
                file_type
            ) VALUES (
                #{version}, 
                #{fileType}
            ) ON CONFLICT (file_type) DO UPDATE SET 
                version = EXCLUDED.version,
                created_at = CURRENT_TIMESTAMP
        </if>
    </insert>

    <insert id="mergeShrt" parameterType="map">
        /* H2 Database */
        <if test="_databaseId == 'h2'">
            MERGE INTO village_forecast_shrt AS target
            USING (VALUES (
                #{nx},
                #{ny},
                #{baseDate},
                #{baseTime},
                #{fcstDate},
                #{fcstTime},
                #{category},
                #{fcstValue},
                CURRENT_TIMESTAMP
            )) AS source (
                nx, ny, base_date, base_time, fcst_date, fcst_time, category, fcst_value, created_at
            )
            ON target.nx = source.nx 
                AND target.ny = source.ny 
                AND target.fcst_date = source.fcst_date 
                AND target.fcst_time = source.fcst_time 
                AND target.category = source.category
            WHEN MATCHED THEN
                UPDATE SET 
                    base_date = source.base_date,
                    base_time = source.base_time,
                    fcst_value = source.fcst_value,
                    created_at = source.created_at
            WHEN NOT MATCHED THEN
                INSERT (nx, ny, base_date, base_time, fcst_date, fcst_time, category, fcst_value, created_at)
                VALUES (source.nx, source.ny, source.base_date, source.base_time, source.fcst_date, 
                       source.fcst_time, source.category, source.fcst_value, source.created_at)
        </if>
        
        /* PostgreSQL */
        <if test="_databaseId == 'postgresql'">
            INSERT INTO village_forecast_shrt (
                nx,
                ny,
                base_date,
                base_time,
                fcst_date,
                fcst_time,
                category,
                fcst_value,
                created_at
            ) VALUES (
                #{nx},
                #{ny},
                #{baseDate},
                #{baseTime},
                #{fcstDate},
                #{fcstTime},
                #{category},
                #{fcstValue},
                CURRENT_TIMESTAMP
            ) ON CONFLICT (nx, ny, fcst_date, fcst_time, category) 
            DO UPDATE SET
                base_date = EXCLUDED.base_date,
                base_time = EXCLUDED.base_time,
                fcst_value = EXCLUDED.fcst_value,
                created_at = CURRENT_TIMESTAMP
        </if>
    </insert>
</mapper>
